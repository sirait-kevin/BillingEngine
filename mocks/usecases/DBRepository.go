// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sirait-kevin/BillingEngine/usecases (interfaces: DBRepository)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/sirait-kevin/BillingEngine/domain/entities"
)

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDBRepository) BeginTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBRepositoryMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBRepository)(nil).BeginTx), arg0)
}

// CreateLoan mocks base method.
func (m *MockDBRepository) CreateLoan(arg0 context.Context, arg1 *sql.Tx, arg2 entities.Loan) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockDBRepositoryMockRecorder) CreateLoan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockDBRepository)(nil).CreateLoan), arg0, arg1, arg2)
}

// CreateRepayment mocks base method.
func (m *MockDBRepository) CreateRepayment(arg0 context.Context, arg1 *sql.Tx, arg2 entities.Repayment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepayment", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepayment indicates an expected call of CreateRepayment.
func (mr *MockDBRepositoryMockRecorder) CreateRepayment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepayment", reflect.TypeOf((*MockDBRepository)(nil).CreateRepayment), arg0, arg1, arg2)
}

// SelectLoanByReferenceId mocks base method.
func (m *MockDBRepository) SelectLoanByReferenceId(arg0 context.Context, arg1 string) (*entities.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLoanByReferenceId", arg0, arg1)
	ret0, _ := ret[0].(*entities.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLoanByReferenceId indicates an expected call of SelectLoanByReferenceId.
func (mr *MockDBRepositoryMockRecorder) SelectLoanByReferenceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLoanByReferenceId", reflect.TypeOf((*MockDBRepository)(nil).SelectLoanByReferenceId), arg0, arg1)
}

// SelectLoanByUserId mocks base method.
func (m *MockDBRepository) SelectLoanByUserId(arg0 context.Context, arg1 int64) (*[]entities.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLoanByUserId", arg0, arg1)
	ret0, _ := ret[0].(*[]entities.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLoanByUserId indicates an expected call of SelectLoanByUserId.
func (mr *MockDBRepositoryMockRecorder) SelectLoanByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLoanByUserId", reflect.TypeOf((*MockDBRepository)(nil).SelectLoanByUserId), arg0, arg1)
}

// SelectRepaymentByLoanId mocks base method.
func (m *MockDBRepository) SelectRepaymentByLoanId(arg0 context.Context, arg1 int64) (*[]entities.Repayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRepaymentByLoanId", arg0, arg1)
	ret0, _ := ret[0].(*[]entities.Repayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRepaymentByLoanId indicates an expected call of SelectRepaymentByLoanId.
func (mr *MockDBRepositoryMockRecorder) SelectRepaymentByLoanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRepaymentByLoanId", reflect.TypeOf((*MockDBRepository)(nil).SelectRepaymentByLoanId), arg0, arg1)
}

// SelectRepaymentByReferenceId mocks base method.
func (m *MockDBRepository) SelectRepaymentByReferenceId(arg0 context.Context, arg1 string) (*entities.Repayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRepaymentByReferenceId", arg0, arg1)
	ret0, _ := ret[0].(*entities.Repayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRepaymentByReferenceId indicates an expected call of SelectRepaymentByReferenceId.
func (mr *MockDBRepositoryMockRecorder) SelectRepaymentByReferenceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRepaymentByReferenceId", reflect.TypeOf((*MockDBRepository)(nil).SelectRepaymentByReferenceId), arg0, arg1)
}

// SelectRepaymentCountByLoanId mocks base method.
func (m *MockDBRepository) SelectRepaymentCountByLoanId(arg0 context.Context, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRepaymentCountByLoanId", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRepaymentCountByLoanId indicates an expected call of SelectRepaymentCountByLoanId.
func (mr *MockDBRepositoryMockRecorder) SelectRepaymentCountByLoanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRepaymentCountByLoanId", reflect.TypeOf((*MockDBRepository)(nil).SelectRepaymentCountByLoanId), arg0, arg1)
}

// SelectTotalRepaymentAmountByLoanId mocks base method.
func (m *MockDBRepository) SelectTotalRepaymentAmountByLoanId(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTotalRepaymentAmountByLoanId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTotalRepaymentAmountByLoanId indicates an expected call of SelectTotalRepaymentAmountByLoanId.
func (mr *MockDBRepositoryMockRecorder) SelectTotalRepaymentAmountByLoanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTotalRepaymentAmountByLoanId", reflect.TypeOf((*MockDBRepository)(nil).SelectTotalRepaymentAmountByLoanId), arg0, arg1)
}

// UpdateLoanStatusByReferenceId mocks base method.
func (m *MockDBRepository) UpdateLoanStatusByReferenceId(arg0 context.Context, arg1 *sql.Tx, arg2 string, arg3 entities.LoanStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanStatusByReferenceId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanStatusByReferenceId indicates an expected call of UpdateLoanStatusByReferenceId.
func (mr *MockDBRepositoryMockRecorder) UpdateLoanStatusByReferenceId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanStatusByReferenceId", reflect.TypeOf((*MockDBRepository)(nil).UpdateLoanStatusByReferenceId), arg0, arg1, arg2, arg3)
}
