// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sirait-kevin/BillingEngine/domain/interfaces (interfaces: AtomicTransaction)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAtomicTransaction is a mock of AtomicTransaction interface.
type MockAtomicTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicTransactionMockRecorder
}

// MockAtomicTransactionMockRecorder is the mock recorder for MockAtomicTransaction.
type MockAtomicTransactionMockRecorder struct {
	mock *MockAtomicTransaction
}

// NewMockAtomicTransaction creates a new mock instance.
func NewMockAtomicTransaction(ctrl *gomock.Controller) *MockAtomicTransaction {
	mock := &MockAtomicTransaction{ctrl: ctrl}
	mock.recorder = &MockAtomicTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtomicTransaction) EXPECT() *MockAtomicTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockAtomicTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockAtomicTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAtomicTransaction)(nil).Commit))
}

// ExecContext mocks base method.
func (m *MockAtomicTransaction) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockAtomicTransactionMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockAtomicTransaction)(nil).ExecContext), varargs...)
}

// Rollback mocks base method.
func (m *MockAtomicTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockAtomicTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockAtomicTransaction)(nil).Rollback))
}
